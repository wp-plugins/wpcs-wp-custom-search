<?phpfunction roots_widgets_init() {register_widget('wpcs_search_Widget');register_widget('wpcs_most_view_Widget');}add_action('widgets_init', 'roots_widgets_init');/* * WP Custom Search widget */class wpcs_search_Widget extends WP_Widget {    private $fields = array(        'title'         => 'Title (optional)',    );        function __construct() {        $widget_ops = array('classname' => 'wpcs_searchbox', 'description' => __('Use this widget to add a WP Custom Search', 'roots'));        $this->WP_Widget('wpcs_search_Widget', __('WPCS Search', 'roots'), $widget_ops);        $this->alt_option_name = 'wpcs_search_Widget';    }        function widget($args, $instance) {        $cache = wp_cache_get('wpcs_search_Widget', 'widget');        if (!is_array($cache)) {          $cache = array();        }        if (!isset($args['widget_id'])) {          $args['widget_id'] = null;        }        if (isset($cache[$args['widget_id']])) {          echo $cache[$args['widget_id']];          return;        }        ob_start();        extract($args, EXTR_SKIP);        $title = apply_filters('widget_title', empty($instance['title']) ? false : $instance['title'], $instance, $this->id_base);        foreach($this->fields as $name => $label) {          if (!isset($instance[$name])) { $instance[$name] = ''; }        }        echo $before_widget;	if ($title) {			echo '<h3 class="widget-title">', $title, '</h3>';		}		$html = '<div class="custom_search" style="background-color:#'.get_option('wpcs_back_color_widget').'">';		$html .= '<p style="color:#'.get_option('wpcs_text_color_widget').';font-size:'.get_option('wpcs_top_head_px_widget').'px;">'.get_option('wpcs_top_head_widget').'</p>';		$html .= '<p style="color:#'.get_option('wpcs_text_color_widget').';font-size:'.get_option('wpcs_sub_head_px_widget').'px;">'.get_option('wpcs_sub_head_widget').'</p>';		    $html .=  '<div style="clear:both;"></div>';		$html .= '<div class="searchform-widget">			    <form action="'.home_url().'" method="get" class="searchform ">			<fieldset>			    <span class="text"><i class="fa fa-search"></i><input name="s" id="s" type="text" class="serachbox" value="" placeholder="'.get_option('wpcs_search_field_widget').'" autocomplete="off"></span>			</fieldset>			<fieldset>			<span class="button-wrap"><button class="btn btn-special" style="background-color:#'.get_option('wpcs_button_color_widget').';color:#'.get_option('wpcs_text_color_widget').'" title="'.get_option('wpcs_search_button_widget').'" type="submit">'.get_option('wpcs_search_button_widget').'</button></span></fieldset>		    </form>			</div>';		$html .=  '<div style="clear:both;"></div>';		 		$html .= '<ul class="custom_search_cat">';		$hide_empty = get_option('wpcs_hide_empty_widget');		if($hide_empty == 1){			$hide = true;		}else{			$hide = false;		}		if(get_option('wpcs_default_cat_widget') == 1){		$terms = get_terms( 'category', array('hide_empty' => $hide) );		     foreach ( $terms as $term ) {			if( (get_option('wpcs_hide_uncat_widget') == 1) && ($term->term_id == 1) ){}else{		       $html .= '<li>'.'<a href="' . get_term_link( $term ) . '" style="background-color:#'.get_option('wpcs_cat_color_widget').';color:#'.get_option('wpcs_text_color_widget').'">' . $term->name . '</a></li>';			}			     }		}		if(get_option('wpcs_custom_taxonomy_widget') != NULL){			$custom_taxonomy = get_option('wpcs_custom_taxonomy_widget');			$custom_tax_count = count( $custom_taxonomy );			if($custom_tax_count > 0){				for($i=0; $i<$custom_tax_count; $i++){				$terms = get_terms( $custom_taxonomy[$i], array('hide_empty' => $hide) );				     foreach ( $terms as $term ) {				       $html .= '<li>'.'<a href="' . get_term_link( $term ) . '" style="background-color:#'.get_option('wpcs_cat_color_widget').';color:#'.get_option('wpcs_text_color_widget').'">' . $term->name . '</a></li>';				     }				}			}		}		if(get_option('wpcs_wp_tags_widget') == 1){			$tags = get_tags();			foreach ( $tags as $tag ) {				$tag_link = get_tag_link( $tag->term_id );						$html .= "<li><a href='{$tag_link}' title='{$tag->name} Tag' class='{$tag->slug}'  style='background-color:#".get_option('wpcs_cat_color_widget').";color:#".get_option('wpcs_text_color_widget')."'>";				$html .= "{$tag->name}</a></li>";			}		}		$html .= '</ul>';		$html .= '<style>'.get_option('wpcs_custom_css').'</style>';		echo $html;        echo $after_widget;		echo '<div style="clear:both;"></div>';        $cache[$args['widget_id']] = ob_get_flush();        wp_cache_set('wpcs_search_Widget', $cache, 'widget');    }    function form($instance) {        foreach($this->fields as $name => $label) {          ${$name} = isset($instance[$name]) ? esc_attr($instance[$name]) : '';        ?>        <p>          <label for="<?php echo esc_attr($this->get_field_id($name)); ?>"><?php _e("{$label}:", 'roots'); ?></label>          <input class="widefat" id="<?php echo esc_attr($this->get_field_id($name)); ?>" name="<?php echo esc_attr($this->get_field_name($name)); ?>" type="text" value="<?php echo ${$name}; ?>">        </p>        <?php        }    }        function flush_widget_cache() {        wp_cache_delete('wpcs_search_Widget', 'widget');    }}/* * WPCS Most Viewed Posts widget */class wpcs_most_view_Widget extends WP_Widget {    private $fields = array(        'title'         => 'Title (optional)',    );        function __construct() {        $widget_ops = array('classname' => 'wpcs_wpcs_most_view', 'description' => __('Use this widget to add a Most Viewed Posts', 'roots'));        $this->WP_Widget('wpcs_most_view_Widget', __('Most Viewed Posts', 'roots'), $widget_ops);        $this->alt_option_name = 'wpcs_most_view_Widget';    }        function widget($args, $instance) {        $cache = wp_cache_get('wpcs_most_view_Widget', 'widget');        if (!is_array($cache)) {          $cache = array();        }        if (!isset($args['widget_id'])) {          $args['widget_id'] = null;        }        if (isset($cache[$args['widget_id']])) {          echo $cache[$args['widget_id']];          return;        }        ob_start();        extract($args, EXTR_SKIP);        $title = apply_filters('widget_title', empty($instance['title']) ? false : $instance['title'], $instance, $this->id_base);        foreach($this->fields as $name => $label) {          if (!isset($instance[$name])) { $instance[$name] = ''; }        }        echo $before_widget;	if ($title) {			echo '<h3 class="widget-title">', $title, '</h3>';		}		$args = array('posts_per_page' => get_option('wpcs_postno_widget'), 'post_type' => 'post', 'meta_key' => 'post_views_count','orderby' => 'meta_value', 'order' => 'DESC');		$query = new WP_Query( $args );	// The Loop	if ( $query->have_posts() ) {		while ( $query->have_posts() ) {			$query->the_post();            ?>	  <?php if(get_option('wpcs_thnumbnail_widget') == 1){?>            <div class="image">                <a href="<?php the_permalink(); ?>"><?php echo get_the_post_thumbnail(get_the_ID(), 'thumbnail', array('class' => 'img-responsive')); ?></a>            </div>		<?php } ?>	    <div class="wpcs_post_content">	  <?php if( get_option('wpcs_title_widget') == 1 ){ ?>			            <h4 class="widget-title"><a href="<?php the_permalink(); ?>"><?php the_title(); ?></a></h4>		<?php } ?> <?php if( get_option('wpcs_excerpt_widget') == 1 ){ ?>		<p class="latest-excrpt"><?php echo substr(get_the_excerpt(),0,get_option('wpcs_excerpt_length_widget')); ?>..</p>		<?php } ?> <?php if( get_option('wpcs_author_widget') == 1 ){ ?>		<p class="author">Author: <?php the_author(); ?></p>		<?php } ?> <?php if( get_option('wpcs_count_widget') == 1 ){ ?>		<p class="view_count">View Count: <?php echo get_post_meta(get_the_ID(), 'post_views_count', true); ?></p>		<?php } ?>		<p class="latest-more pull-right" ><a href="<?php the_permalink(); ?>">Read more>></a></p>           </div>			            <?php }		} else {			// no posts found		}            wp_reset_postdata();		        echo $after_widget;		echo '<div style="clear:both;"></div>';        $cache[$args['widget_id']] = ob_get_flush();        wp_cache_set('wpcs_most_view_Widget', $cache, 'widget');    }    function form($instance) {        foreach($this->fields as $name => $label) {          ${$name} = isset($instance[$name]) ? esc_attr($instance[$name]) : '';        ?>        <p>          <label for="<?php echo esc_attr($this->get_field_id($name)); ?>"><?php _e("{$label}:", 'roots'); ?></label>          <input class="widefat" id="<?php echo esc_attr($this->get_field_id($name)); ?>" name="<?php echo esc_attr($this->get_field_name($name)); ?>" type="text" value="<?php echo ${$name}; ?>">        </p>        <?php        }    }        function flush_widget_cache() {        wp_cache_delete('wpcs_most_view_Widget', 'widget');    }}?>